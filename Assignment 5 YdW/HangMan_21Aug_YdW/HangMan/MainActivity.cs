using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Android.Views.InputMethods;
using Android.Content.PM;

namespace HangMan
{

    [Activity(Label = "Hang Man", Icon = "@drawable/hm_icon", ScreenOrientation = ScreenOrientation.Portrait)] //to show on top of the screen the game name and the logo of the game and always in a portrait position


    public class MainActivity : Activity
    {
        // to show the design of interface on the mobile screen
        ImageView imgHM;//to show the hangman pictures if wrong letter entered

        EditText RDWord1;//to show the random words for the player to guess - upto 6 characters
        EditText RDWord2;
        EditText RDWord3;
        EditText RDWord4;
        EditText RDWord5;
        EditText RDWord6;

        TextView textViewLength; //to use as a label to show the length of the random word
        EditText WordLength;

        TextView textViewScore; //to use as a label to show the player's score
        EditText EDScore; //player's name

        TextView textViewName; //to use as a label to show the player's name
        EditText EDName;

        Button btnClear; //to clear all the contents and launch a new game
        Button btnScore; //to view the score board

        //to show button A - Z
        Button btnA; Button btnB; Button btnC; Button btnD; Button btnE; Button btnF; Button btnG;
        Button btnH; Button btnI; Button btnJ; Button btnK; Button btnL; Button btnM; Button btnN;
        Button btnO; Button btnP; Button btnQ; Button btnR; Button btnS; Button btnT; Button btnU;
        Button btnV; Button btnW; Button btnX; Button btnY; Button btnZ;

        //set the global variables
        string stringWord = ""; //show the word generated by database and selected by a random number
        int Correctly_guessed_letters = 0; //correctly guessed letters in the stringword
        string wordBank; //to hold an array of words for the player to guess
        int wrongLetterCount = 0;//to record the number of wrongly selected letter in the stringword
        string PlayerName;//to record the player's name
        int score = 0; //player's score
        List<int> lstLetterPositions = new List<int>();//a list to hold all the correct positions of the guessed letter(s)

        //for database connect
        ListView lstMyWords;
        List<MyWords> myWordList;
        static string dbName = "HMWords.sqlite";
        string dbPath = Path.Combine(Android.OS.Environment.ExternalStorageDirectory.ToString(), dbName);
        DatabaseManager1 objDb;


        protected override void OnCreate(Bundle bundle)
        {
            base.OnCreate(bundle);

            // Set our view from the "main" layout resource
            SetContentView(Resource.Layout.Main);

            imgHM = FindViewById<ImageView>(Resource.Id.imgHM);
            RDWord1 = FindViewById<EditText>(Resource.Id.RDWord1);
            RDWord2 = FindViewById<EditText>(Resource.Id.RDWord2);
            RDWord3 = FindViewById<EditText>(Resource.Id.RDWord3);
            RDWord4 = FindViewById<EditText>(Resource.Id.RDWord4);
            RDWord5 = FindViewById<EditText>(Resource.Id.RDWord5);
            RDWord6 = FindViewById<EditText>(Resource.Id.RDWord6);

            textViewLength = FindViewById<TextView>(Resource.Id.textViewLength);
            WordLength = FindViewById<EditText>(Resource.Id.WordLength);

            textViewScore = FindViewById<TextView>(Resource.Id.textViewScore);
            EDScore = FindViewById<EditText>(Resource.Id.EDScore);

            textViewName = FindViewById<TextView>(Resource.Id.textViewName);
            EDName = FindViewById<EditText>(Resource.Id.EDName);
            EDName.Click += EDName_Click;
            btnClear = FindViewById<Button>(Resource.Id.btnClear);
            btnScore = FindViewById<Button>(Resource.Id.btnScore);

            btnA = FindViewById<Button>(Resource.Id.btnA);
            btnB = FindViewById<Button>(Resource.Id.btnB);
            btnC = FindViewById<Button>(Resource.Id.btnC);
            btnD = FindViewById<Button>(Resource.Id.btnD);
            btnE = FindViewById<Button>(Resource.Id.btnE);
            btnF = FindViewById<Button>(Resource.Id.btnF);
            btnG = FindViewById<Button>(Resource.Id.btnG);
            btnH = FindViewById<Button>(Resource.Id.btnH);
            btnI = FindViewById<Button>(Resource.Id.btnI);
            btnJ = FindViewById<Button>(Resource.Id.btnJ);
            btnK = FindViewById<Button>(Resource.Id.btnK);
            btnL = FindViewById<Button>(Resource.Id.btnL);
            btnM = FindViewById<Button>(Resource.Id.btnM);
            btnN = FindViewById<Button>(Resource.Id.btnN);
            btnO = FindViewById<Button>(Resource.Id.btnO);
            btnP = FindViewById<Button>(Resource.Id.btnP);
            btnQ = FindViewById<Button>(Resource.Id.btnQ);
            btnR = FindViewById<Button>(Resource.Id.btnR);
            btnS = FindViewById<Button>(Resource.Id.btnS);
            btnT = FindViewById<Button>(Resource.Id.btnT);
            btnU = FindViewById<Button>(Resource.Id.btnU);
            btnV = FindViewById<Button>(Resource.Id.btnV);
            btnW = FindViewById<Button>(Resource.Id.btnW);
            btnX = FindViewById<Button>(Resource.Id.btnX);
            btnY = FindViewById<Button>(Resource.Id.btnY);
            btnZ = FindViewById<Button>(Resource.Id.btnZ);

            NewGame();
            MakeRandomWord();
            wordlength();
            displayword();
            buttonFunction();

            btnClear.Click += btnClear_Click;
            //btnScore.Click += btnScore_Click; //Score board show function. Score system is in the database of score. Not set up yet.

            //to hide keyboard at OnCreat stage
            EDName.InputType = 0;
        }

        void EDName_Click(object sender, EventArgs e)//to unhide the keyboard when the EditText is on click event
        {
            EDName.InputType = Android.Text.InputTypes.ClassText;
        }

        void btnClear_Click(object sender, EventArgs e)
        {
            NewGame();//to start a new game
            MakeRandomWord();//to generate the random word

            wordlength();//to check the length of the word
            displayword(); //to display the word on EditText
            imgHM.Visibility = ViewStates.Invisible; //and hide the pictures
        }

        public void NewGame()
        {
            //clear all the texts in editviews
            RDWord1.Text = string.Empty;
            RDWord2.Text = string.Empty;
            RDWord3.Text = string.Empty;
            RDWord4.Text = string.Empty;
            RDWord5.Text = string.Empty;
            RDWord6.Text = string.Empty;

            WordLength.Text = "";//clear EditText word length
            EDName.Text = "";//clear player name area

            //show all the buttons from A-Z
            allbuttonsvisible();

            //Clear the wrong letter count from the previous game and empty the list held the previous right letter position
            lstLetterPositions.Clear();
            wrongLetterCount = 0;
        }

        public void buttonFunction()//delegate the button text to the char
        {
            btnA.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnA.Text));
                btnA.Visibility = ViewStates.Invisible;

            };
            btnB.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnB.Text));
                btnB.Visibility = ViewStates.Invisible;
            };
            btnC.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnC.Text));
                btnC.Visibility = ViewStates.Invisible;
            };
            btnD.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnD.Text));
                btnD.Visibility = ViewStates.Invisible;
            };

            btnE.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnE.Text));
                btnE.Visibility = ViewStates.Invisible;
            };

            btnF.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnF.Text));
                btnF.Visibility = ViewStates.Invisible;
            };

            btnG.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnG.Text));
                btnG.Visibility = ViewStates.Invisible;
            };
            btnH.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnH.Text));
                btnH.Visibility = ViewStates.Invisible;
            };
            btnI.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnI.Text));
                btnI.Visibility = ViewStates.Invisible;
            };
            btnJ.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnJ.Text));
                btnJ.Visibility = ViewStates.Invisible;
            };
            btnK.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnK.Text));
                btnK.Visibility = ViewStates.Invisible;
            };
            btnL.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnL.Text));
                btnL.Visibility = ViewStates.Invisible;
            };
            btnM.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnM.Text));
                btnM.Visibility = ViewStates.Invisible;
            };
            btnN.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnN.Text));
                btnN.Visibility = ViewStates.Invisible;
            };
            btnO.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnO.Text));
                btnO.Visibility = ViewStates.Invisible;
            };
            btnP.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnP.Text));
                btnP.Visibility = ViewStates.Invisible;
            };
            btnQ.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnQ.Text));
                btnQ.Visibility = ViewStates.Invisible;
            };
            btnR.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnR.Text));
                btnR.Visibility = ViewStates.Invisible;
            };
            btnS.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnS.Text));
                btnS.Visibility = ViewStates.Invisible;
            };
            btnT.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnT.Text));
                btnT.Visibility = ViewStates.Invisible;
            };
            btnU.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnU.Text));
                btnU.Visibility = ViewStates.Invisible;
            };
            btnV.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnV.Text));
                btnV.Visibility = ViewStates.Invisible;
            };
            btnW.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnW.Text));
                btnW.Visibility = ViewStates.Invisible;
            };
            btnX.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnX.Text));
                btnX.Visibility = ViewStates.Invisible;
            };
            btnY.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnY.Text));
                btnY.Visibility = ViewStates.Invisible;
            };
            btnZ.Click += delegate
            {
                CHECKLETTER(Convert.ToChar(btnZ.Text));
                btnZ.Visibility = ViewStates.Invisible;
            };

        }

        public void showthisimage(int img) //function of showing 6 images when choosed a wrong letter/charactor
        {
            imgHM.Visibility = ViewStates.Visible;
            switch (img)
            {
                case 1:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw1);
                    break;
                case 2:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw2);
                    break;

                case 3:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw3);
                    break;
                case 4:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw4);
                    break;
                case 5:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw5);
                    break;
                case 6:
                    imgHM.SetImageResource(Resource.Drawable.HM_draw6);
                    break;

            }
        }

        public void MakeRandomWord()//to generate a word by random number
        {
            List<string> wordBank = new List<string>() { "bake", "your", "gift", "great", "fancy", "friend","green","red","fast","yellow","letter" };

            //to generate random number
            Random r = new Random();
            int num = r.Next(0,11);

            //using the random number to find the word, called stringword
            stringWord = wordBank[num];

            System.Console.WriteLine("the stringword is " + stringWord + " and the random number is " + num);
        }

        public void wordlength()//check the length of the stringword
        {
            stringWord = stringWord.ToUpper();//to transfer the lower case of word into upper case because all the keybutton are using upper case
            char[] splitletter = stringWord.ToCharArray();//to split the string word into characters
            WordLength.Text = (splitletter.Length).ToString(); //to pass the length of character into the editview on app
            System.Console.WriteLine("the wordlength is " + (splitletter.Length));
        }

        public void displayword()//to display the charactors of the random word in the EditView area in app 
        {
            // put each splited character into the editview using a for loop
            for (int i = 0; i < stringWord.Length; i++)
            {
                if (i == 0)
                {
                    char letter1 = stringWord.ToCharArray()[0];
                    RDWord1.Text = Convert.ToString(letter1);
                    RDWord1.Visibility = ViewStates.Invisible;
                }
                if (i == 1)
                {
                    char letter2 = stringWord.ToCharArray()[1];
                    RDWord2.Text = Convert.ToString(letter2);
                    RDWord2.Visibility = ViewStates.Invisible;
                }
                if (i == 2)
                {
                    char letter3 = stringWord.ToCharArray()[2];
                    RDWord3.Text = Convert.ToString(letter3);
                    RDWord3.Visibility = ViewStates.Invisible;
                }
                if (i == 3)
                {
                    char letter4 = stringWord.ToCharArray()[3];
                    RDWord4.Text = Convert.ToString(letter4);
                    RDWord4.Visibility = ViewStates.Invisible;
                }
                if (i == 4)
                {
                    char letter5 = stringWord.ToCharArray()[4];
                    RDWord5.Text = Convert.ToString(letter5);
                    RDWord5.Visibility = ViewStates.Invisible;
                }
                if (i == 5)
                {
                    char letter6 = stringWord.ToCharArray()[5];
                    RDWord6.Text = Convert.ToString(letter6);
                    RDWord6.Visibility = ViewStates.Invisible;
                }
            }
        }

        public void allbuttonsvisible()//to show the 26 alphabet letters
        {
            btnA.Visibility = ViewStates.Visible; btnB.Visibility = ViewStates.Visible;
            btnC.Visibility = ViewStates.Visible; btnD.Visibility = ViewStates.Visible;
            btnE.Visibility = ViewStates.Visible; btnF.Visibility = ViewStates.Visible;
            btnG.Visibility = ViewStates.Visible; btnH.Visibility = ViewStates.Visible;
            btnI.Visibility = ViewStates.Visible; btnJ.Visibility = ViewStates.Visible;
            btnK.Visibility = ViewStates.Visible; btnL.Visibility = ViewStates.Visible;
            btnM.Visibility = ViewStates.Visible; btnN.Visibility = ViewStates.Visible;
            btnO.Visibility = ViewStates.Visible; btnP.Visibility = ViewStates.Visible;
            btnQ.Visibility = ViewStates.Visible; btnR.Visibility = ViewStates.Visible;
            btnS.Visibility = ViewStates.Visible; btnT.Visibility = ViewStates.Visible;
            btnU.Visibility = ViewStates.Visible; btnV.Visibility = ViewStates.Visible;
            btnW.Visibility = ViewStates.Visible; btnX.Visibility = ViewStates.Visible;
            btnY.Visibility = ViewStates.Visible; btnZ.Visibility = ViewStates.Visible;

        }

        public void CHECKLETTER(char guess)//to check whether the guessed letter/character is in the stringword
        {
            lstLetterPositions.Clear();//to clear the items in the list of letter position for correctly guessed letters
            char[] splitletter = stringWord.ToCharArray(); //split the string word into characters

            int indx = 0;//index for the right position of the letter/character in the stringword

            if (stringWord.Contains(Convert.ToString(guess)) == false)//if the entered letter does not exist in the stringword
            {
                wrongLetterCount++; //count the wrong entry
            }
            else
            {// the guessed letter is in the stringword  

                foreach (var item in splitletter)
                {
                    if (guess == Convert.ToChar(item))//if the guessed letter is correct

                    //to put the letter into the correct position(s)
                    {
                        lstLetterPositions.Add(indx); //to put the index/position into a list
                        Correctly_guessed_letters++;//count the correcly guessed letters
                    }
                    indx += 1;// add on each time in the loop if there are more than one position in the stringword for the same letter
                }  //end of foreach  

                foreach (var item in lstLetterPositions)//after finding the list of correct letter position, fill the EditText with the correct position
                {
                    if (item == 0)
                    {
                        RDWord1.Text = Convert.ToString(guess);
                        RDWord1.Visibility = ViewStates.Visible;
                    }
                    if (item == 1)
                    {
                        RDWord2.Text = Convert.ToString(guess);
                        RDWord2.Visibility = ViewStates.Visible;
                    }
                    if (item == 2)
                    {
                        RDWord3.Text = Convert.ToString(guess);
                        RDWord3.Visibility = ViewStates.Visible;
                    }
                    if (item == 3)
                    {
                        RDWord4.Text = Convert.ToString(guess);
                        RDWord4.Visibility = ViewStates.Visible;
                    }
                    if (item == 4)
                    {
                        RDWord5.Text = Convert.ToString(guess);
                        RDWord5.Visibility = ViewStates.Visible;
                    }
                    if (item == 5)
                    {
                        RDWord6.Text = Convert.ToString(guess);
                        RDWord6.Visibility = ViewStates.Visible;
                    }
                }//end of foreach
            }//end of else
            showthisimage(wrongLetterCount);//show the picture of hang man each time when a wrong letter is entered

            if (wrongLetterCount == 6)//if the player entered 6 wrong letters, the game will end and new game starts
            {
                Toast.MakeText(this, "You are so unlucky. The correct word is " + stringWord, ToastLength.Long).Show();
                score--;//decrease the score by 1
                EDScore.Text = score.ToString();//show the score the player got
                NewGame();
                MakeRandomWord();
                wordlength();
                displayword();

            }
            if (Correctly_guessed_letters == stringWord.Length)
            {
                score++;//increase the score by 1 if one guessed all the correct letters
                EDScore.Text = score.ToString();//show the score the player got
                imgHM.Visibility = ViewStates.Invisible;
            }
        }

        public void playernamerecord() //record the player's name for score board use
        {
            if (EDName.Text.Length > 0)
            {
                PlayerName = EDName.Text;
            }
            else
                PlayerName = "Dude";
        }

        #region"dataset"
        void btnScore_Click(object sender, EventArgs e)
        {
            SetContentView(Resource.Layout.Main);
            lstMyWords = FindViewById<ListView>(Resource.Id.listView1);
            lstMyWords.ItemClick += lstMyWords_ItemClick;
            CopyDatabase();

            objDb = new DatabaseManager1();
            myWordList = objDb.ViewAll();
            lstMyWords.Adapter = new DataAdapter1(this, myWordList);
        }

        void lstMyWords_ItemClick(object sender, AdapterView.ItemClickEventArgs e)
        {
            Console.WriteLine("I'm working");
            Toast.MakeText(this, myWordList[e.Position].Word, ToastLength.Long).Show();

        }

        public void CopyDatabase()
        {
            if (!File.Exists(dbPath))//toggle the ! to force install
            {
                using (BinaryReader br = new BinaryReader(Assets.Open(dbName)))
                {
                    using (BinaryWriter bw = new BinaryWriter(new FileStream(dbPath, FileMode.Create)))
                    {
                        byte[] buffer = new byte[2048];
                        int len = 0;
                        while ((len = br.Read(buffer, 0, buffer.Length)) > 0)
                        {
                            bw.Write(buffer, 0, len);
                        }
                    }
                }
            }
        }



        //for the hangman project, I do not need a menu. But keep the following codes for future projects.
        //public override bool OnCreateOptionsMenu(IMenu menu)
        //{
        //    menu.Add("Add");
        //    menu.Add("Edit");
        //    menu.Add("Wash");
        //    menu.Add("Dry");
        //    menu.Add("Spin");
        //    return base.OnPrepareOptionsMenu(menu);
        //}

        //public override bool OnOptionsItemSelected(IMenuItem item)
        //{
        //    var itemTitle = item.TitleFormatted.ToString();
        //    Console.WriteLine(item.TitleFormatted);
        //    switch (itemTitle.ToString())
        //    {
        //        case "Add":
        //            Console.WriteLine("Yes");
        //            Toast.MakeText(this, item.TitleFormatted.ToString(), ToastLength.Long).Show();

        //            break;
        //    }
        //    return base.OnOptionsItemSelected(item);
        //}

        #endregion

    }
}

